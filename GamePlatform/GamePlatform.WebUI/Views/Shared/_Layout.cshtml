@using GamePlatform.WebUI.Extensions;
<html>
<head>
    <title>Gaming</title>

    <meta name="description" content="Best Games 4 U">
    <meta name="keywords" content="Games, AspNet, Software">
    <meta name="author" content="Uğur Konuk">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">


    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-GLhlTQ8iRABdZLl6O3oVMWSktQOp6b7In1Zl3/Jr59b6EGGoI1aFkw7cmDA6j6gD" crossorigin="anonymous">

    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.3/font/bootstrap-icons.css">

    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/2.1.4/toastr.min.css" integrity="sha512-6S2HWzVFxruDlZxI3sXOZZ4/eJ8AcxkQH1+JjSe/ONCEqR9L4Ysq5JdT5ipqtzU7WHalNwzwBv+iE51gNHJNqQ==" crossorigin="anonymous" referrerpolicy="no-referrer" />

    <style>

        label.required:after {
            content: "*\00a0";
            color: red;
            margin-left: 2px;
        }

        #clock {
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            width: calc(100vw - 4px);
            max-width: 300px;
        }
    </style>

</head>

<body class="d-flex flex-column min-vh-100">
    <header>
        <nav class="navbar navbar-dark bg-dark">
            <div class="container-fluid">
                <a class="navbar-brand" href="/">
                    <img src="~/Images/oct.png" alt="Logo" width="60" height="40" class="d-inline-block align-text-top">

                </a>
                <ul class="nav col-12 col-lg-auto me-lg-auto mb-2 justify-content-center mb-md-0 ms-5">
                    <li>
                        <div id="clock"></div>
                    </li>

                </ul>
                <div class="d-none" id="login">

                    <partial name="_LoginPartial" model="new LoginViewModel()"></partial>
                </div>
                @if (!User.IsLogged())
                {
                    <div class="text-end" id="welcome">

                        <partial name="_SignUpPartial" />

                    </div>
                }
                else
                {
                    var firstName = User.GetUserFirstName();


                    <div class="d-flex">


                        <div class="mt-2">Hoş Geldin @firstName  </div>

                        @if (User.IsAdmin())
                        {
                            <div class="ms-3">
                                <a asp-area="admin" asp-controller="Dashboard" asp-action="Index" class="btn btn-danger">Yönetim Paneli</a>
                            </div>

                        }
                        <div>
                            <a asp-controller="Auth" asp-action="Logout" class="btn btn-outline-warning ms-3">

                                <i class="bi bi-door-open-fill"></i>  Çıkış Yap

                            </a>

                        </div>


                    </div>

                }
            </div>
        </nav>

    </header>
    <div class="container">
        @RenderBody()
    </div>

    <footer class="bg-dark text-white text-center mt-auto fw-bold py-5">
        Gaming | VirtualOctopus A.Ş
        <p class="text-secondary"> © Tüm Hakları Saklıdır.</p>
        <img src="~/Images/ooctopus.jpeg" alt="Logo" width="40" height="40" class="d-inline-block" />
    </footer>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.6.3/jquery.min.js" integrity="sha512-STof4xm1wgkfm7heWqFJVn58Hm3EtS31XFaagaa8VMReCXAkQnJZ+jEy8PCC/iT18dFy95WcExNHFTqLyp72eQ==" crossorigin="anonymous" referrerpolicy="no-referrer"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/2.1.4/toastr.min.js" integrity="sha512-lbwH47l/tPXJYG9AcFNoJaTMhGvYWhVM9YI43CT+uteTRRaiLCui8snIgyAN8XWgNjNhCqlAUdzZptso6OCoFQ==" crossorigin="anonymous" referrerpolicy="no-referrer"></script>

    <script>
        function initClock(elt, color = '#0ff', backgroundColor = 'none') {
            let timeObj = {
                numberPathsD: {
                    topM: "M 8 4 L 16 4 L 18 6 L 16 8 L 8 8 L 6 6 Z",
                    midd: "M 8 18 L 16 18 L 18 20 L 16 22 L 8 22 L 6 20 Z",
                    topL: "M 6 7 L 8 9 L 8 17 L 6 19 L 4 17 L 4 9 Z",
                    topR: "M 18 7 L 20 9 L 20 17 L 18 19 L 16 17 L 16 9 Z",
                    btmM: "M 8 32 L 16 32 L 18 34 L 16 36 L 8 36 L 6 34 Z",
                    btmL: "M 6 21 L 8 23 L 8 31 L 6 33 L 4 31 L 4 23 Z",
                    btmR: "M 18 21 L 20 23 L 20 31 L 18 33 L 16 31 L 16 23 Z"
                },
                seconds: {
                    topM: [1, 0, 1, 1, 0, 1, 1, 1, 1, 1],
                    midd: [0, 0, 1, 1, 1, 1, 1, 0, 1, 1],
                    topL: [1, 0, 0, 0, 1, 1, 1, 0, 1, 1],
                    topR: [1, 1, 1, 1, 1, 0, 0, 1, 1, 1],
                    btmM: [1, 0, 1, 1, 0, 1, 1, 0, 1, 1],
                    btmL: [1, 0, 1, 0, 0, 0, 1, 0, 1, 0],
                    btmR: [1, 1, 0, 1, 1, 1, 1, 1, 1, 1]
                },
                tenSeconds: {
                    topM: [1, 0, 1, 1, 0, 1],
                    midd: [0, 0, 1, 1, 1, 1],
                    topL: [1, 0, 0, 0, 1, 1],
                    topR: [1, 1, 1, 1, 1, 0],
                    btmM: [1, 0, 1, 1, 0, 1],
                    btmL: [1, 0, 1, 0, 0, 0],
                    btmR: [1, 1, 0, 1, 1, 1]
                },
                minutes: {
                    topM: [1, 0, 1, 1, 0, 1, 1, 1, 1, 1],
                    midd: [0, 0, 1, 1, 1, 1, 1, 0, 1, 1],
                    topL: [1, 0, 0, 0, 1, 1, 1, 0, 1, 1],
                    topR: [1, 1, 1, 1, 1, 0, 0, 1, 1, 1],
                    btmM: [1, 0, 1, 1, 0, 1, 1, 0, 1, 1],
                    btmL: [1, 0, 1, 0, 0, 0, 1, 0, 1, 0],
                    btmR: [1, 1, 0, 1, 1, 1, 1, 1, 1, 1]
                },
                tenMinutes: {
                    topM: [1, 0, 1, 1, 0, 1],
                    midd: [0, 0, 1, 1, 1, 1],
                    topL: [1, 0, 0, 0, 1, 1],
                    topR: [1, 1, 1, 1, 1, 0],
                    btmM: [1, 0, 1, 1, 0, 1],
                    btmL: [1, 0, 1, 0, 0, 0],
                    btmR: [1, 1, 0, 1, 1, 1]
                },
                hours: {
                    topM: [1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0],
                    midd: [1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0],
                    topL: [0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0],
                    topR: [1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1],
                    btmM: [1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0],
                    btmL: [1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0],
                    btmR: [0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1]
                },
                tenHours: {
                    topM: [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0],
                    midd: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                    topL: [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0],
                    topR: [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
                    btmM: [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0],
                    btmL: [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0],
                    btmR: [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
                }
            };


            const now = new Date();

            const hours = now.getHours();
            const onesDigitHours = hours % 12;
            const minutes = now.getMinutes();
            const onesDigitMinutes = minutes % 10;
            const seconds = now.getSeconds();
            const onesDigit = now.getSeconds() % 10;
            const milliseconds = now.getMilliseconds();
            let HH = hours.toString().padStart(2, '0');
            let MM = minutes.toString().padStart(2, '0');
            let SS = seconds.toString().padStart(2, '0');
            let M0 = MM.charAt(0) * 1;
            let M1 = MM.charAt(1) * 1;
            let S0 = SS.charAt(0) * 1;
            let S1 = SS.charAt(1) * 1;


            HH = (HH * 1);

            let HHMMSS = `${HH}:${MM}:${SS}`;

            let milliAnimStartPercent = (milliseconds / 1000) * 1;


            const shiftAtIndex = (arr, index) => {
                let rm = arr.splice(0, index);
                arr.push(...rm);
                return arr;
            }

            const adjustProps = (digit, numberIndex) => {
                for (let prop in timeObj[digit]) {
                    timeObj[digit][prop] = shiftAtIndex(timeObj[digit][prop], numberIndex);
                }
            }

            adjustProps('seconds', S1);
            adjustProps('tenSeconds', S0);
            adjustProps('minutes', M1);
            adjustProps('tenMinutes', M0);
            adjustProps('hours', HH);
            adjustProps('tenHours', HH);

            const populateAnimations = (array, pathD, waitTime, id, alreadyCompleted) => {
                let arrLen = array.length;
                let path = `<path d="${pathD}" opacity="${array[0]}">
                <animate id="${id}0" attributeName="opacity" dur=".1s" begin="${alreadyCompleted}; ${id}${arrLen - 1}.end+${waitTime}" fill="freeze" values="${array[0]}; ${array[1]}"/>`;

                for (let i = 1; i < array.length - 1; i++) {
                    path += `<animate id="${id}${i}" attributeName="opacity" dur=".1s" begin="${id}${i - 1}.end+${waitTime}" fill="freeze" values="${array[i]}; ${array[i + 1]}"/>`;
                }

                path += `<animate id="${id}${arrLen - 1}" attributeName="opacity" dur=".1s" begin="${id}${arrLen - 2}.end+${waitTime}" fill="freeze" values="${array[arrLen - 1]}; ${array[0]}" /></path>`;
                return path;
            }


            let sDelay = milliAnimStartPercent;

            let stDelay = 9 - onesDigit + sDelay;

            let mDelay = (59 - seconds) + milliAnimStartPercent;

            let mtDelay = 599 - (599 * (onesDigitMinutes / 10)) - 59.9 + mDelay;

            let hDelay = (3599 - (3599 * (minutes / 60) + 60 - mDelay));

            let htDelay = (3599 - (3599 * (minutes / 60) + 60 - mDelay));


            const digitClasses = ['topM', 'midd', 'topL', 'topR', 'btmM', 'btmL', 'btmR'];
            const s = [];
            const st = [];
            const m = [];
            const mt = [];
            const h = [];
            const ht = [];


            for (let i = 0; i < digitClasses.length; i++) {

                s.push(populateAnimations(timeObj.seconds[digitClasses[i]], timeObj.numberPathsD[digitClasses[i]], '0.9s', 'sec', `${sDelay}s`));

                st.push(populateAnimations(timeObj.tenSeconds[digitClasses[i]], timeObj.numberPathsD[digitClasses[i]], '9.9s', 'tenSec', `${stDelay}s`));

                m.push(populateAnimations(timeObj.minutes[digitClasses[i]], timeObj.numberPathsD[digitClasses[i]], '59.9s', 'min', `${mDelay}s`));

                mt.push(populateAnimations(timeObj.tenMinutes[digitClasses[i]], timeObj.numberPathsD[digitClasses[i]], '599.9s', 'tenMin', `${mtDelay}s`));

                h.push(populateAnimations(timeObj.hours[digitClasses[i]], timeObj.numberPathsD[digitClasses[i]], '3559.9s', 'hr', `${hDelay}s`));

                ht.push(populateAnimations(timeObj.tenHours[digitClasses[i]], timeObj.numberPathsD[digitClasses[i]], '3599.9s', 'tenHr', `${htDelay}s`));
            }

            let secG = `<g transform="translate(116 0)">${s[0]} ${s[1]} ${s[2]} ${s[3]} ${s[4]} ${s[5]} ${s[6]}</g>`;
            let secTG = `<g transform="translate(96 0)">${st[0]} ${st[1]} ${st[2]} ${st[3]} ${st[4]} ${st[5]} ${st[6]}</g>`;
            let minG = `<g transform="translate(68 0)">${m[0]} ${m[1]} ${m[2]} ${m[3]} ${m[4]} ${m[5]} ${m[6]}</g>`;
            let minTG = `<g transform="translate(48 0)">${mt[0]} ${mt[1]} ${mt[2]} ${mt[3]} ${mt[4]} ${mt[5]} ${mt[6]}</g>`;
            let hrG = `<g transform="translate(20 0)">${h[0]} ${h[1]}	${h[2]}	${h[3]} ${h[4]}	${h[5]} ${h[6]}</g>`;
            let hrTG = `<g transform="translate(0 0)">${ht[0]} ${ht[1]} ${ht[2]} ${ht[3]} ${ht[4]} ${ht[5]} ${ht[6]}</g>`;

            const svg = document.createElementNS('http://www.w3.org/2000/svg', 'svg');
            svg.setAttribute('viewBox', '0 0 350 50');
            svg.innerHTML = `<filter id="glow" x="-200%" y="-200%" width="1000%" height="1000%">
                <feGaussianBlur in="SourceGraphic" stdDeviation="1.4" />
            </filter>
            <rect x="0%" y="0%" height="100%" width="100%" fill="${backgroundColor}" />
            <g fill="${color}" filter="url(#glow)">
                <g id="glower">
                    ${secG}${secTG}
                    <path class="secMinDots" d="M92 11v4h4v-4ZM 92 25v4h4v-4Z" />
                    ${minG}${minTG}
                    <path class="minHrDots" d="M44 11v4h4v-4ZM 44 25v4h4v-4Z" />
                    ${hrG}${hrTG}
                </g>
            </g>
            <use href="#glower" fill="${color}" />`;
            const wrapper = document.createElement("div");
            wrapper.innerHTML = svg;
            const doc = wrapper.firstChild;
            elt.appendChild(svg);
        }

        initClock(document.querySelector("#clock"));

        $('#btnGirisYap').click(function () {
            $('#welcome').addClass('d-none');
            $('#login').removeClass('d-none');

        })

        $('#btnIptal').click(function () {
            $('#welcome').removeClass('d-none');
            $('#login').addClass('d-none');
        })

        @if (!string.IsNullOrWhiteSpace(TempData["ErrorMessage"]?.ToString()))
        {
            @:toastr.error("@TempData["ErrorMessage"]?.ToString()");
        }

        @if (!string.IsNullOrWhiteSpace(TempData["LoginMessage"]?.ToString()))
        {
            @:toastr.info("@TempData["LoginMessage"]?.ToString()");
        }


    </script>
</body>
</html>